# Example Config that uses almost all values

alg: PPO
alg_kwargs:
  clip_range: 0.2
  clip_range_vf: 0.5
  num_epochs: 10
  normalize_advantage: True
  ent_coeff: 0.0
  vf_coeff: 0.5
  normalize_returns: True
  reward_clip: 10

optim: Adam
optim_kwargs:
  lr: 0.0003

network: ActorCriticPolicy
network_kwargs:
  actor_class: DiagonalGaussianMLPActor
  actor_kwargs:
    hidden_layers: [64, 64]
    log_std_bounds: null
    act: ["import", "torch.nn", "Tanh"]
    state_dependent_log_std: False
    ortho_init: 1.41421356237
    output_gain: 0.01
  critic_class: MLPValue
  critic_kwargs:
    hidden_layers: [64, 64]
    act: ["import", "torch.nn", "Tanh"]
    ortho_init: 1.41421356237
    output_gain: 0.01

batch_size: null # Use serial rollout buffer
collate_fn: null # The collate function passed to the dataloader. None uses pytorch default.
checkpoint: null # A checkpoint to initialize the network from.

env: HalfCheetah-v2

dataset: RolloutBuffer
dataset_kwargs:
  discount: 0.99
  gae_lambda: 0.95
  capacity: 2048
  batch_size: 64

processor: RunningObservationNormalizer
processor_kwargs:
  clip: 10

train_kwargs: # Arguments given to Algorithm.train
  total_steps: 1000000 # The total number of steps to train
  log_freq: 1000 # How often to log values
  eval_freq: 20000 # How often to run evals
  eval_ep: 10 # Number of enviornment episodes to run for evaluation, or -1 if none should be run.
  loss_metric: reward # The validation metric that determines when to save the "best_checkpoint"
  workers: 0 # Number of dataloader workers.
  profile_freq: 100
  x_axis: env_steps
